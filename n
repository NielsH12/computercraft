--[[
3Rd6ttwp git
RYWcJNZQ clone

	API with implementation of local movement

--]]

-- VARIABLES --
local refuel = false

local xCoord = 0
local yCoord = 0
local zCoord = 0

local directions = {"south", "west", "north", "east"}
local direction = 3

local xDiff = {0, -1, 0, 1}
local zDiff = {1, 0, -1, 0}



-- FUNCTIONS --

function test()
	print("n API by Niels Hvid")
end

function setRefuelMode(mode)
	if type(mode) ~= "boolean" then print("setRefuelMode needs boolean argument") end
	refuel = mode
end

function forward(length, mode)
	if length == nill then length = 1 end
	if mode == nill then mode = 'w' end
	
	if turtle.getFuelLevel() < length then
		if refuel then refuel() else nofuel() end
	end
	
	for i = 1,length,1 do
		while not turtle.forward() do
			if mode == 'f' then turtle.dig() end
		end
		xCoord = xCoord + xDiff[direction]
		zCoord = zCoord + zDiff[direction]
	end
end

function back(length, mode)
	if length == nill then length = 1 end
	if mode == nill then mode = 'w' end
	
	if turtle.getFuelLevel() < length then
		if refuel then refuel() else nofuel() end
	end
	
	for i = 1,length,1 do
		while not turtle.back() do
			if mode == 'f' then 
				left(2)
				turtle.dig()
				right(2)
			end
		end
		xCoord = xCoord - xDiff[direction]
		zCoord = zCoord - zDiff[direction]
	end
end

function up(length, mode)
	if length == nill then length = 1 end
	if mode == nill then mode = 'w' end
	
	if turtle.getFuelLevel() < length then
		if refuel then refuel() else nofuel() end
	end
	
	for i = 1,length,1 do
		while not turtle.up() do
			if mode == 'f' then turtle.digUp() end

		end
		yCoord = yCoord + 1
	end
end

function down(length, mode)
	if length == nill then length = 1 end
	if mode == nill then mode = 'w' end
	
	if turtle.getFuelLevel() < length then
		if refuel then refuel() else nofuel() end
	end
	
	for i = 1,length,1 do
		while not turtle.down() do
			if mode == 'f' then turtle.digDown() end

		end
		yCoord = yCoord - 1
	end
end

function left(length)
	if length == nill then length = 1 end
	
	for i = 1,length,1 do
		turtle.turnLeft()
		direction = (direction - 2) % 4 + 1
	end
end

function right(length)
	if length == nill then length = 1 end
	
	for i = 1,length,1 do
		turtle.turnRight()
		direction = direction % 4 + 1
	end
end

function refuel()
	slot = turtle.getSelectedSlot()
	fueled = false
	for i = 1,16,1 do
		turtle.select(i)
		if turtle.refuel() then fueled = true end
	end
	turtle.select(slot)
	if fueled then
		return fueled
	else
		nofuel()
	end
end

function nofuel() -- Appropriate action when out of fuel, status maybe?
	print("Hello")
	slot = turtle.getSelectedSlot()
	for i = 1,16,1 do
		if turtle.getItemCount(i) == 0 then
			turtle.select(i)
			print("Please add fuel to selected slot")
			while not turtle.refuel() do sleep(1) end
			break
		end
	end
	if turtle.getFuelLevel == 0 then
		while turtle.getFuelLevel() == 0 do
			print("please add fuel to slot 1 and press any key")
			turtle.select(1)
			os.pullEvent( "key" )
			turtle.refuel()
			sleep(2)
		end
	end
	turtle.select(slot)
end

function askCoordinates()
	print("Enter x coordinate: ")
	xCoord = tonumber(read())
	print("Enter y coordinate: ")
	yCoord = tonumber(read())
	print("Enter z coordinate: ")
	zCoord = tonumber(read())
	print("Enter direction number (S,W,N,E): ")
	direction = tonumber(read())
end

function setCoordinates( x, y, z, d)
	xCoord = x
	yCoord = y
	zCoord = z
	direction = d
end

function getCoordinates()
	return {xCoord, yCoord, zCoord, direction}
end

function look(orientation)
	while orientation ~= directions[direction] do n.left() end
end

function goto(x,y,z,d)
	if yCoord < y then
		up(math.abs(y - yCoord),'f')
	end
	if x < xCoord then
		n.look("west")
		forward(math.abs(xCoord - x),'f')
	end
	if x > xCoord then
		n.look("east")
		forward(math.abs(x - xCoord),'f')
	end
	if z < zCoord then
		look("north")
		forward(math.abs(zCoord - z),'f')
	end
	if zCoord < z then
		n.look("south")
		forward(math.abs(z - zCoord),'f')
	end
	if y < yCoord then
		down(math.abs(yCoord - y),'f')
	end
	look(d)
end

local directions = {"south", "west", "north", "east"}
local direction = 3

local xDiff = {0, -1, 0, 1}
local zDiff = {1, 0, -1, 0}
