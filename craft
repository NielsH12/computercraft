--[[
Need folowing functions

getItemCount(item)
selectItem(item)
getItem(slot)

]]--

function getItemCount(item)
	local count = 0
	for i = 1, 16, 1 do
		d = turtle.getItemDetail(i)
		if not (d == nill) then
			if (d.name == item) then
				count = count + d.count
			end
		end
	end
	return count
end

function selectItem(item)
	for i = 1, 16, 1 do
		d = getItemDetail(i)
		if not (d == nill) then
			if (d.name == item) then
				select(i)
				return true
			end
		end
	end
	return false
end

function getItem(slot)
	d = turtle.getItemDetail(slot)
	if (d == nill) then
		return ""
	else
		return s.name
	end
end

recipe = {}
recipe["minecraft:planks"] = {"minecraft:log"}
recipe["minecraft:wooden_slab"] = {"minecraft:planks", "minecraft:planks", "minecraft:planks"}
recipe["exnihilo:barrel"] = {"minecraft:planks", nill, "minecraft:planks", "minecraft:planks", nill, "minecraft:planks", "minecraft:planks", "minecraft:wooden_slab", "minecraft:planks"}

function craftItem(item, count, force)

	-- Check for recipe
	if (recipe[item] == nill) then
		print("Unknown recipe!")
		return false
	end

	-- Check for valid number
	if (count == nill) then
		count = 1
	elseif (count > 64) then
		count = 64
	end

	-- Check force state
	if (force == nill) then
		force = false
	end

	-- Create a list of items in recipe
	local itemInRecipe = {}
	for i = 1, 9, 1 do
		if not (recipe[item][i] == nill) then
			for j = 1, #itemInRecipe, 1 do
				if (itemInRecipe[j] == recipe[item][i]) then
					break
				end
			end
			table.insert(itemInRecipe, recipe[item][i])
		end
	end

	-- Print list of items in recipe
	print("List of used items:")
	for i = 1, #itemInRecipe, 1 do
		print(itemInRecipe[i])
	end

	-- Create list of item counts in recipe
	local itemCountInRecipe = {}
	for i = 1, #itemInRecipe, 1 do
		local itemCount = 0
		for j = 1, 9, 1 do
			if (itemInRecipe[i] == recipe[item][j]) then
				itemCount = itemCount + 1
			end
		end
		itemCountInRecipe[i] = itemCount * count
	end

	-- Print list of item counts in recipe
	print("List of items in recipe:")
	for i = 1, #itemInRecipe, 1 do
		print(itemInRecipe[i] .. ": " .. itemCountInRecipe[i])
	end

	-- Create list of items for use
	local itemCount = {}
	for i = 1, #itemInRecipe, 1 do
		itemCount[i] = getItemCount(itemInRecipe[i])
	end

	-- Print list of items for use
	print("List of items for use:")
	for i = 1, #itemInRecipe, 1 do
		print(itemInRecipe[i] .. ": " .. itemCount[i])
	end

	-- Check for missing items
	local missingItem = false
	for i = 1, #itemInRecipe, 1 do
		if (itemCount[i] < itemCountInRecipe[i]) then
			print("Missing " .. (itemCountInRecipe[i] - itemCount[i]) .. " " .. itemInRecipe[i])
			missingItem = true
		end
	end
	if (missingItem) then
		return false
	end

	-- Empty for unused item
	if not (selectItem("minecraft:chest")) then
		print("No chest found in inventory!")
		return false
	end
	if (force) then
		while not turtle.placeUp() do
			turtle.digUp()
		end
	else
		if not (turtle.placeUp()) then
			print("Cant place chest!")
			return false
		end
	end
	for i = 1, 16, 1 do
		local foundInRecipe = false
		for j = 1, #itemInRecipe, 1 do
			if (getItem(i) == itemInRecipe[j]) then
				foundInRecipe = true
				break
			end
		end
		if not (foundInRecipe) then
			turtle.select(i)
			if not (turtle.dropUp()) then
				print("Not enough space in chest!")
				return false
			end
		end
	end

	-- Put item together

	-- Place items

	-- Craft

	-- Fill with unused items
	turtle.select(1)
	while (turtle.suckUp()) do end
	turtle.digUp()
	return true
end
